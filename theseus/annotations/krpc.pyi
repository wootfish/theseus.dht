from twisted.protocols.basic import NetstringReceiver
from twisted.internet.defer import Deferred
from twisted.python.failure import Failure

from typing import Dict, Tuple, Union, Any


class KRPCProtocol(NetstringReceiver):
    def __init__(self, *args, **kwargs) -> None: ...
    def handleQuery(self, txn_id: bytes, query_name: bytes, args: Dict[bytes, Any]) -> None: ...
    def onQuery(self, txn_id: bytes, query_name: bytes, args: Dict[bytes, Any]) -> None: ...
    def onError(self, failure: Failure) -> Failure: ...
    def sendQuery(self, query_name: Union[str, bytes], args: Dict[bytes, Any]) -> Deferred: ...
    def sendResponse(self, txn_id: bytes, retval: Any) -> None: ...
    def sendError(self, txn_id, errtup: Tuple[int, Union[str, bytes]]) -> None: ...
